# Nomenclature
Logical port = number that the user enters into the SMI API (e.g. SMI_Open_send_channel(..., 5))
Channel = Intel channel used to write and read data

# Routing tables
There are 2 routing tables for each rank.

## CKS routing table
- size is the number of Logical ports
- maps Logical port to a number:
0 => send to connected QSFP
1 => send to connected CKR
2 => send to first neighbour CKS
<number of QSFP> => send to ... neighbour CKS

- neighbours are always counted from the first kernel
Kernel 0
Kernel 1
Kernel 2

K0 - first neighbour is K1, second neighbour is K2
K1 - first neighbour is K0, second neighbour is K2
K2 - first neighbour is K0, second neighbour is K1

## CKR routing table
- size is the number of Logical ports * 2
- contains entries for both data and control ports
Logical port X: data is at rt[x * 2], control is at rt[x * 2 + 1]

- maps Logical port and data/control to a number:
0 => invalid (the program does not expect to receive this combination)
- in the current implementation, this will result in sending the packet to CK_S
1 => send to first neighbour CK_R
<number of QSFP - 1> => send to ... neighbour CK_R
<number of QSFP> => first channel assigned to the given CKR
<number of QSFP + 1> => ... channel assigned to the given CKR

- neighbours are counted in the same way as for the CKS routing table

# Channel distribution amongst kernels
Channels are assigned to CKS/CKR in a round-robin fashion.
Data and control hardware ports are combined (in this order) and then distributed.
Example:
cks_data_channels = [0, 1, 2]
cks_control_channels = [0, 1]
cks_hw_ports = [("data", 0), ("data", 1), ("data", 2), ("control", 0), ("control", 1)]
number of CKS = 3
CKS_0 => [("data", 0), ("control", 0)]
CKS_1 => [("data", 1), ("control", 1)]
CKS_2 => [("data", 2)]
